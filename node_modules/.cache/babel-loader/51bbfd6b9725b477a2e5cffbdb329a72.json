{"ast":null,"code":"import _regeneratorRuntime from\"/Users/javaughnburke/Library/Mobile Documents/com~apple~CloudDocs/Desktop/myProjects/githubFolder/clones/netflix/netflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/javaughnburke/Library/Mobile Documents/com~apple~CloudDocs/Desktop/myProjects/githubFolder/clones/netflix/netflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/javaughnburke/Library/Mobile Documents/com~apple~CloudDocs/Desktop/myProjects/githubFolder/clones/netflix/netflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import instance from'./axios';import'./MovieRow.css';import YouTube from'react-youtube';import trailerUrl from'movie-trailer';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var url_main=\"https://image.tmdb.org/t/p/original/\";function MovieRows(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,large=_ref.large;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setPosters=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailer=_useState4[0],setTrailer=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return instance.get(fetchUrl);case 2:data=_context.sent;console.log(data);setPosters(data.data.results);return _context.abrupt(\"return\",data);case 6:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var options={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};var handleClick=function handleClick(movie){if(trailer){setTrailer(\"\");}else{trailerUrl((movie===null||movie===void 0?void 0:movie.name)||(movie===null||movie===void 0?void 0:movie.title)||\"\").then(function(url){var parameters=new URLSearchParams(new URL(url).search);setTrailer(parameters.get(\"v\"));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"movie_rows\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"row_title\",children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"posters\",children:movies.map(function(movieData){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){handleClick(movieData);},className:\"poster \".concat(large&&\"largePoster\"),src:\"\".concat(url_main).concat(large?movieData.poster_path:movieData.backdrop_path),alt:movieData.name},movieData.id);})}),trailer&&/*#__PURE__*/_jsx(YouTube,{videoId:trailer,opts:options})]});}export default MovieRows;","map":{"version":3,"sources":["/Users/javaughnburke/Library/Mobile Documents/com~apple~CloudDocs/Desktop/myProjects/githubFolder/clones/netflix/netflix/src/MovieRows.js"],"names":["React","useState","useEffect","instance","YouTube","trailerUrl","url_main","MovieRows","title","fetchUrl","large","movies","setPosters","trailer","setTrailer","fetchData","get","data","console","log","results","options","height","width","playerVars","autoplay","handleClick","movie","name","then","url","parameters","URLSearchParams","URL","search","catch","error","map","movieData","poster_path","backdrop_path","id"],"mappings":"0sBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,QAAP,KAAqB,SAArB,CACA,MAAO,gBAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,UAAP,KAAuB,eAAvB,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAG,sCAAjB,CAEA,QAASC,CAAAA,SAAT,MAA+C,IAA1BC,CAAAA,KAA0B,MAA1BA,KAA0B,CAAnBC,QAAmB,MAAnBA,QAAmB,CAATC,KAAS,MAATA,KAAS,CAC3C,cAA6BT,QAAQ,CAAC,EAAD,CAArC,wCAAOU,MAAP,eAAeC,UAAf,eACA,eAA8BX,QAAQ,CAAC,EAAD,CAAtC,yCAAOY,OAAP,eAAgBC,UAAhB,eAEAZ,SAAS,CAAC,UAAM,SACGa,CAAAA,SADH,qIACZ,kKACwBZ,CAAAA,QAAQ,CAACa,GAAT,CAAaP,QAAb,CADxB,QACUQ,IADV,eAEIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,EACAL,UAAU,CAACK,IAAI,CAACA,IAAL,CAAUG,OAAX,CAAV,CAHJ,gCAIUH,IAJV,wDADY,4CAOZF,SAAS,GACZ,CARQ,CAQN,CAACN,QAAD,CARM,CAAT,CAUA,GAAMY,CAAAA,OAAO,CAAG,CACZC,MAAM,CAAE,KADI,CAEZC,KAAK,CAAE,MAFK,CAGZC,UAAU,CAAE,CACRC,QAAQ,CAAE,CADF,CAHA,CAAhB,CAQA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC3B,GAAGd,OAAH,CAAY,CACRC,UAAU,CAAC,EAAD,CAAV,CACH,CAFD,IAEO,CACHT,UAAU,CAAC,CAAAsB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,IAAeD,KAAf,SAAeA,KAAf,iBAAeA,KAAK,CAAEnB,KAAtB,GAA+B,EAAhC,CAAV,CAA8CqB,IAA9C,CAAmD,SAACC,GAAD,CAAS,CACxD,GAAMC,CAAAA,UAAU,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAnB,CACApB,UAAU,CAACiB,UAAU,CAACf,GAAX,CAAe,GAAf,CAAD,CAAV,CACH,CAHD,EAGGmB,KAHH,CAGS,SAACC,KAAD,QAAWlB,CAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ,CAAX,EAHT,EAIH,CACJ,CATD,CAWA,mBACI,aAAK,SAAS,CAAC,YAAf,wBACI,WAAI,SAAS,CAAG,WAAhB,UAA6B5B,KAA7B,EADJ,cAEI,YAAK,SAAS,CAAG,SAAjB,UACEG,MAAM,CAAC0B,GAAP,CAAW,SAACC,SAAD,qBACR,YAEA,OAAO,CAAI,kBAAM,CAACZ,WAAW,CAACY,SAAD,CAAX,CAAuB,CAFzC,CAGA,SAAS,kBAAc5B,KAAK,EAAI,aAAvB,CAHT,CAIA,GAAG,WAAKJ,QAAL,SAAgBI,KAAK,CAAG4B,SAAS,CAACC,WAAb,CAA2BD,SAAS,CAACE,aAA1D,CAJH,CAKA,GAAG,CAAEF,SAAS,CAACV,IALf,EACOU,SAAS,CAACG,EADjB,CADQ,EAAX,CADF,EAFJ,CAcK5B,OAAO,eAAI,KAAC,OAAD,EAAS,OAAO,CAAIA,OAApB,CAA6B,IAAI,CAAIQ,OAArC,EAdhB,GADJ,CAkBH,CAED,cAAed,CAAAA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport instance from './axios';\nimport './MovieRow.css'\nimport YouTube from 'react-youtube';\nimport trailerUrl from 'movie-trailer';\n\nconst url_main = \"https://image.tmdb.org/t/p/original/\";\n\nfunction MovieRows({ title, fetchUrl, large }) {\n    const [movies, setPosters] = useState([]);\n    const [trailer, setTrailer] = useState(\"\");\n\n    useEffect(() => {\n        async function fetchData() {\n            const data =  await instance.get(fetchUrl)\n            console.log(data);\n            setPosters(data.data.results);\n           return data\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const options = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1\n        }\n    }\n\n    const handleClick = (movie) => {\n        if(trailer) {\n            setTrailer(\"\");\n        } else {\n            trailerUrl(movie?.name || movie?.title || \"\").then((url) => {\n                const parameters = new URLSearchParams(new URL(url).search);\n                setTrailer(parameters.get(\"v\"));\n            }).catch((error) => console.log(error));\n        }\n    }\n\n    return (\n        <div className=\"movie_rows\">\n            <h1 className = \"row_title\">{title}</h1>\n            <div className = \"posters\">\n             {movies.map((movieData) => (\n                 <img\n                 key = {movieData.id}\n                 onClick = {() => {handleClick(movieData)}}\n                 className = {`poster ${large && \"largePoster\"}`}\n                 src={`${url_main}${large ? movieData.poster_path : movieData.backdrop_path}`}\n                 alt={movieData.name} \n                 />\n             ))}  \n                \n            </div>\n            {trailer && <YouTube videoId = {trailer} opts = {options}/>}\n        </div>\n    )\n}\n\nexport default MovieRows\n"]},"metadata":{},"sourceType":"module"}