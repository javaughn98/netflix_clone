{"version":3,"sources":["axios.js","MovieRows.js","req.js","MovieBanner.js","Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","MovieRows","title","fetchUrl","large","useState","movies","setPosters","trailer","setTrailer","useEffect","a","get","data","console","log","results","fetchData","className","map","movieData","onClick","movie","trailerUrl","name","then","url","parameters","URLSearchParams","URL","search","catch","error","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","dataRequests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanticMovies","fetchDocumentaries","MovieBanner","str","n","setBanner","req","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Navbar","nav","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b454fe6f.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","import React, { useState, useEffect } from 'react';\nimport instance from './axios';\nimport './MovieRow.css'\nimport YouTube from 'react-youtube';\nimport trailerUrl from 'movie-trailer';\n\nconst url_main = \"https://image.tmdb.org/t/p/original/\";\n\nfunction MovieRows({ title, fetchUrl, large }) {\n    const [movies, setPosters] = useState([]);\n    const [trailer, setTrailer] = useState(\"\");\n\n    useEffect(() => {\n        async function fetchData() {\n            const data =  await instance.get(fetchUrl)\n            console.log(data);\n            setPosters(data.data.results);\n           return data\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const options = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1\n        }\n    }\n\n    const handleClick = (movie) => {\n        if(trailer) {\n            setTrailer(\"\");\n        } else {\n            trailerUrl(movie?.name || movie?.title || \"\").then((url) => {\n                const parameters = new URLSearchParams(new URL(url).search);\n                setTrailer(parameters.get(\"v\"));\n            }).catch((error) => console.log(error));\n        }\n    }\n\n    return (\n        <div className=\"movie_rows\">\n            <h1 className = \"row_title\">{title}</h1>\n            <div className = \"posters\">\n             {movies.map((movieData) => (\n                 <img\n                 key = {movieData.id}\n                 onClick = {() => {handleClick(movieData)}}\n                 className = {`poster ${large && \"largePoster\"}`}\n                 src={`${url_main}${large ? movieData.poster_path : movieData.backdrop_path}`}\n                 alt={movieData.name} \n                 />\n             ))}  \n                \n            </div>\n            {trailer && <YouTube videoId = {trailer} opts = {options}/>}\n        </div>\n    )\n}\n\nexport default MovieRows\n","const API_KEY = \"1c15322900938cd34bfa4d6311c1eb84\";\n\nconst dataRequests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/movie?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanticMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\n}\n\nexport default dataRequests;\n","import React, { useState, useEffect } from 'react';\nimport './MovieBanner.css';\nimport instance from './axios';\nimport req from './req'\n\nfunction MovieBanner() {\n\n    const[movie, setBanner] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n        const data = await instance.get(req.fetchTrending);\n        setBanner(data.data.results[Math.floor(Math.random() * data.data.results.length - 1)]);\n            return data;\n        }\n        fetchData();\n    }, []);\n\n    function truncate(str, n) {\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n    }\n\n    return (\n        <div className = \"mainBanner\"\n        style = {{\n            backgroundSize: \"cover\",\n            backgroundImage: `url(\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n            )`,\n            backgroundPosition: \"center center\",\n        }}\n        >\n            <div className = \"content\">\n                <h1 className = \"title\">{movie?.name || movie?.original_name || movie?.title}</h1>\n                <div className = \"buttons\">\n                    <button className = \"banner_button\">Play</button>\n                    <button className = \"banner_button\">My List</button>\n                </div>\n                <h1 className = \"description\">{truncate(movie?.overview, 200)}</h1>\n            </div>\n            <div className=\"fade\"></div>\n            \n        </div>\n    )\n}\n\nexport default MovieBanner\n","import React, { useState, useEffect }from 'react';\nimport './Navbar.css'\n\nfunction Navbar() {\n\n    const[nav, handleShow] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if(window.scrollY > 100) {\n                handleShow(true);\n            } else {\n                handleShow(false);\n            }\n        })\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, []);\n    return (\n        <div className = {`navbar ${nav && \"dark\"}`}>\n            <img className = \"netflix_img\" src = \"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt = \"Netflix Logo\"/>\n            <img className = \"avatar\" src = \"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt = \"Avatar Logo\"/>\n            \n        </div>\n    )\n}\n\nexport default Navbar\n","import './App.css';\nimport MovieRows from './MovieRows';\nimport req from './req';\nimport MovieBanner from './MovieBanner';\nimport NavBar from './Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <MovieBanner />\n      <MovieRows title = \"Netflix Originals\" large fetchUrl = {req.fetchNetflixOriginals}/>\n      <MovieRows title = \"Trending Now\" fetchUrl = {req.fetchTrending}/>\n      <MovieRows title = \"Top Rated\" fetchUrl = {req.fetchTopRated}/>\n      <MovieRows title = \"Action Movies\"  fetchUrl = {req.fetchActionMovies}/>\n      <MovieRows title = \"Comedy Movies\" fetchUrl = {req.fetchComedyMovies}/>\n      <MovieRows title = \"Horror Movies\" fetchUrl = {req.fetchHorrorMovies}/>\n      <MovieRows title = \"Romantic Movies\" fetchUrl = {req.fetchRomanticMovies}/>\n      <MovieRows title = \"Documentaries\" fetchUrl = {req.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}