{"ast":null,"code":"var _jsxFileName = \"/Users/javaughnburke/Library/Mobile Documents/com~apple~CloudDocs/Desktop/myProjects/githubFolder/clones/netflix/netflix/src/MovieRows.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport instance from './axios';\nimport './MovieRow.css';\nimport YouTube from 'react-youtube';\nimport trailerUrl from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url_main = \"https://image.tmdb.org/t/p/original/\";\n\nfunction MovieRows({\n  title,\n  fetchUrl,\n  large\n}) {\n  _s();\n\n  const [movies, setPosters] = useState([]);\n  const [trailer, setTrailer] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const data = await instance.get(fetchUrl);\n      console.log(data);\n      setPosters(data.data.results);\n      return data;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const options = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailer) {\n      setTrailer(\"\");\n    } else {\n      trailerUrl((movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        const parameters = new URLSearchParams(new URL(url).search);\n        setTrailer(parameters.get(\"v\"));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie_rows\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"row_title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posters\",\n      children: movies.map(movieData => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => {\n          handleClick(movieData);\n        },\n        className: `poster ${large && \"largePoster\"}`,\n        src: `${url_main}${large ? movieData.poster_path : movieData.poster_path}`,\n        alt: movieData.name\n      }, movieData.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 18\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), trailer && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailer,\n      opts: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MovieRows, \"nJvYwQ1ocDIt8XbH2JVr4bCDjXw=\");\n\n_c = MovieRows;\nexport default MovieRows;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieRows\");","map":{"version":3,"sources":["/Users/javaughnburke/Library/Mobile Documents/com~apple~CloudDocs/Desktop/myProjects/githubFolder/clones/netflix/netflix/src/MovieRows.js"],"names":["React","useState","useEffect","instance","YouTube","trailerUrl","url_main","MovieRows","title","fetchUrl","large","movies","setPosters","trailer","setTrailer","fetchData","data","get","console","log","results","options","height","width","playerVars","autoplay","handleClick","movie","name","then","url","parameters","URLSearchParams","URL","search","catch","error","map","movieData","poster_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,SAArB;AACA,OAAO,gBAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,SAAT,CAAmB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAnB,EAA+C;AAAA;;AAC3C,QAAM,CAACC,MAAD,EAASC,UAAT,IAAuBX,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAea,SAAf,GAA2B;AACvB,YAAMC,IAAI,GAAI,MAAMb,QAAQ,CAACc,GAAT,CAAaR,QAAb,CAApB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAJ,MAAAA,UAAU,CAACI,IAAI,CAACA,IAAL,CAAUI,OAAX,CAAV;AACD,aAAOJ,IAAP;AACF;;AACDD,IAAAA,SAAS;AACZ,GARQ,EAQN,CAACN,QAAD,CARM,CAAT;AAUA,QAAMY,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE,KADI;AAEZC,IAAAA,KAAK,EAAE,MAFK;AAGZC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF;AAHA,GAAhB;;AAQA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAGd,OAAH,EAAY;AACRC,MAAAA,UAAU,CAAC,EAAD,CAAV;AACH,KAFD,MAEO;AACHT,MAAAA,UAAU,CAAC,CAAAsB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,MAAeD,KAAf,aAAeA,KAAf,uBAAeA,KAAK,CAAEnB,KAAtB,KAA+B,EAAhC,CAAV,CAA8CqB,IAA9C,CAAoDC,GAAD,IAAS;AACxD,cAAMC,UAAU,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAnB;AACApB,QAAAA,UAAU,CAACiB,UAAU,CAACd,GAAX,CAAe,GAAf,CAAD,CAAV;AACH,OAHD,EAGGkB,KAHH,CAGUC,KAAD,IAAWlB,OAAO,CAACC,GAAR,CAAYiB,KAAZ,CAHpB;AAIH;AACJ,GATD;;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAG,WAAhB;AAAA,gBAA6B5B;AAA7B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAG,SAAjB;AAAA,gBACEG,MAAM,CAAC0B,GAAP,CAAYC,SAAD,iBACR;AAEA,QAAA,OAAO,EAAI,MAAM;AAACZ,UAAAA,WAAW,CAACY,SAAD,CAAX;AAAuB,SAFzC;AAGA,QAAA,SAAS,EAAK,UAAS5B,KAAK,IAAI,aAAc,EAH9C;AAIA,QAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,KAAK,GAAG4B,SAAS,CAACC,WAAb,GAA2BD,SAAS,CAACC,WAAY,EAJzE;AAKA,QAAA,GAAG,EAAED,SAAS,CAACV;AALf,SACOU,SAAS,CAACE,EADjB;AAAA;AAAA;AAAA;AAAA,cADH;AADF;AAAA;AAAA;AAAA;AAAA,YAFJ,EAcK3B,OAAO,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAIA,OAApB;AAA6B,MAAA,IAAI,EAAIQ;AAArC;AAAA;AAAA;AAAA;AAAA,YAdhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;GAnDQd,S;;KAAAA,S;AAqDT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport instance from './axios';\nimport './MovieRow.css'\nimport YouTube from 'react-youtube';\nimport trailerUrl from 'movie-trailer';\n\nconst url_main = \"https://image.tmdb.org/t/p/original/\";\n\nfunction MovieRows({ title, fetchUrl, large }) {\n    const [movies, setPosters] = useState([]);\n    const [trailer, setTrailer] = useState(\"\");\n\n    useEffect(() => {\n        async function fetchData() {\n            const data =  await instance.get(fetchUrl)\n            console.log(data);\n            setPosters(data.data.results);\n           return data\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const options = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1\n        }\n    }\n\n    const handleClick = (movie) => {\n        if(trailer) {\n            setTrailer(\"\");\n        } else {\n            trailerUrl(movie?.name || movie?.title || \"\").then((url) => {\n                const parameters = new URLSearchParams(new URL(url).search);\n                setTrailer(parameters.get(\"v\"));\n            }).catch((error) => console.log(error));\n        }\n    }\n\n    return (\n        <div className=\"movie_rows\">\n            <h1 className = \"row_title\">{title}</h1>\n            <div className = \"posters\">\n             {movies.map((movieData) => (\n                 <img\n                 key = {movieData.id}\n                 onClick = {() => {handleClick(movieData)}}\n                 className = {`poster ${large && \"largePoster\"}`}\n                 src={`${url_main}${large ? movieData.poster_path : movieData.poster_path}`}\n                 alt={movieData.name} \n                 />\n             ))}  \n                \n            </div>\n            {trailer && <YouTube videoId = {trailer} opts = {options}/>}\n        </div>\n    )\n}\n\nexport default MovieRows\n"]},"metadata":{},"sourceType":"module"}